import numpy as np
import matplotlib.pyplot as plt
f = {(1, 0.0): 6.80129649117589e-06, (1, 0.05): 6.6768997348845e-06, (1, 0.1): 6.494698114693165e-06, (1, 0.15): 6.652896758168935e-06, (1, 0.2): 6.914800731465221e-06, (1, 0.25): 6.502399686723948e-06, (1, 0.3): 7.091504288837313e-06, (1, 0.35): 7.655797293409705e-06, (1, 0.4): 6.636599544435739e-06, (1, 0.45): 6.518699694424867e-06, (1, 0.5): 6.464599398896098e-06, (1, 0.55): 7.605098187923432e-06, (1, 0.6): 7.1780998259782795e-06, (1, 0.65): 6.50810357183218e-06, (1, 0.7): 7.0815980434417725e-06, (1, 0.75): 
7.196197984740138e-06, (1, 0.8): 6.355698918923736e-06, (1, 0.85): 6.701396312564611e-06, (1, 0.9): 6.6479973029345275e-06, (1, 
0.95): 7.695101900026203e-06, (1, 1.0): 7.754100719466805e-06, (2, 0.0): 8.96060117520392e-06, (2, 0.05): 4.364899592474103e-06, (2, 0.1): 1.3664600672200322e-05, (2, 0.15): 1.19796022772789e-05, (2, 0.2): 6.140802754089236e-06, (2, 0.25): 6.8531958386301995e-06, (2, 0.3): 8.89559998176992e-06, (2, 0.35): 4.069897113367915e-06, (2, 0.4): 3.6350993905216455e-06, (2, 0.45): 8.33039591088891e-06, (2, 0.5): 1.1862698942422867e-05, (2, 0.55): 5.631302949041128e-06, (2, 0.6): 3.3576986752450466e-06, (2, 0.65): 8.905502269044519e-06, (2, 0.7): 1.016140286810696e-05, (2, 0.75): 8.339503780007363e-06, (2, 0.8): 7.481701206415892e-06, (2, 0.85): 1.0164296720176935e-05, (2, 0.9): 3.7710967008024452e-06, 
(2, 0.95): 8.984400425106287e-06, (2, 1.0): 6.970502901822328e-06, (3, 0.0): 9.76350624114275e-06, (3, 0.05): 1.012569945305586e-05, (3, 0.1): 1.1550505179911852e-05, (3, 0.15): 8.748800726607442e-06, (3, 0.2): 7.561697857454419e-06, (3, 0.25): 1.1028503067791461e-05, (3, 0.3): 8.128698915243149e-06, (3, 0.35): 8.094795979559421e-06, (3, 0.4): 9.832099778577685e-06, (3, 0.45): 8.517603622749447e-06, (3, 0.5): 8.86289938353002e-06, (3, 0.55): 1.1794595047831536e-05, (3, 0.6): 7.108203833922744e-06, (3, 0.65): 7.388507714495063e-06, (3, 0.7): 7.46569805778563e-06, (3, 0.75): 8.586598793044686e-06, (3, 0.8): 4.704412771388888e-06, (3, 
0.85): 6.652498850598931e-06, (3, 0.9): 8.184594800695778e-06, (3, 0.95): 4.498905967921018e-06, (3, 1.0): 5.764397792518139e-06, (4, 0.0): 3.067419840954244e-05, (4, 0.05): 2.6920200092718005e-05, (4, 0.1): 3.514330205507577e-05, (4, 0.15): 2.9165699146687985e-05, (4, 0.2): 2.268780069425702e-05, (4, 0.25): 1.8449702998623252e-05, (4, 0.3): 3.44064983073622e-05, (4, 0.35): 1.8740798812359572e-05, (4, 0.4): 2.0610702922567725e-05, (4, 0.45): 2.7863994939252734e-05, (4, 0.5): 2.341669937595725e-05, (4, 0.55): 3.391700121574104e-05, (4, 0.6): 2.2175499238073825e-05, (4, 0.65): 2.0006999839097262e-05, (4, 0.7): 3.034990280866623e-05, (4, 0.75): 2.3720697965472937e-05, (4, 0.8): 2.7718197787180542e-05, (4, 0.85): 1.8018001224845647e-05, (4, 0.9): 7.147199707105756e-06, (4, 0.95): 9.15039679966867e-06, (4, 1.0): 1.493340265005827e-05, (5, 0.0): 2.6582702761515977e-05, (5, 0.05): 3.623079555109143e-05, (5, 0.1): 4.724310012534261e-05, (5, 0.15): 4.3634100584313274e-05, (5, 0.2): 3.15265937242657e-05, (5, 0.25): 2.069689449854195e-05, (5, 0.3): 2.297039981931448e-05, (5, 0.35): 2.8759003151208163e-05, (5, 0.4): 4.047540109604597e-05, (5, 0.45): 3.814759920351207e-05, (5, 0.5): 3.588279592804611e-05, (5, 0.55): 5.161620257422328e-05, (5, 0.6): 4.0001504588872197e-05, (5, 0.65): 3.957289922982454e-05, (5, 0.7): 4.9042498925700785e-05, (5, 0.75): 3.261299757286906e-05, (5, 0.8): 3.930229949764907e-05, (5, 0.85): 3.158190078102052e-05, (5, 0.9): 4.1455699363723395e-05, (5, 0.95): 1.4325101394206285e-05, (5, 1.0): 1.5226297313347459e-05, (6, 0.0): 2.761229989118874e-05, (6, 0.05): 1.9128100480884315e-05, (6, 0.1): 2.6696795132011174e-05, (6, 0.15): 2.6523801498115063e-05, (6, 0.2): 2.9550402192398905e-05, (6, 0.25): 3.51164045277983e-05, (6, 0.3): 3.4711797954514625e-05, (6, 0.35): 4.8910800134763124e-05, (6, 0.4): 5.140100209973752e-05, (6, 0.45): 8.880650252103805e-05, (6, 0.5): 6.166470679454505e-05, (6, 0.55): 0.00011915300041437149, (6, 0.6): 6.35528014972806e-05, (6, 0.65): 5.964039731770754e-05, (6, 0.7): 6.943960022181272e-05, (6, 0.75): 6.795009481720626e-05, (6, 0.8): 7.734099985100329e-05, (6, 0.85): 7.717710104770958e-05, (6, 0.9): 6.60494000185281e-05, (6, 0.95): 2.3798196809366345e-05, (6, 1.0): 1.773979584686458e-05, (7, 0.0): 2.261730027385056e-05, (7, 0.05): 2.8504296205937863e-05, (7, 0.1): 3.558070329017937e-05, (7, 0.15): 3.088730457238853e-05, (7, 0.2): 3.8417001254856585e-05, (7, 0.25): 4.089080053381622e-05, (7, 0.3): 8.71032988652587e-05, (7, 0.35): 8.9352403068915e-05, (7, 0.4): 9.379720385186374e-05, (7, 0.45): 8.538039727136493e-05, (7, 0.5): 0.00014479840476997195, (7, 0.55): 0.00013666069973260165, (7, 0.6): 0.00015298460749909283, (7, 0.65): 0.00014142700238153338, (7, 0.7): 0.00015793850016780197, (7, 0.75): 0.00015822600177489222, (7, 0.8): 0.00014736190252006055, (7, 0.85): 0.0001657532041426748, (7, 0.9): 0.00020532540371641516, (7, 0.95): 0.00015300200041383505, (7, 1.0): 5.234650382772088e-05}
vlb = 1
vub = 7
x = list(range(vlb, vub+1))
y = [round(0.05*i, 2) for i in range(0,21)]
X = np.array(list(list(i for i in range(vlb, vub+1)) for _ in range(len(y))))
Y = np.array(list(list(i for j in range(vlb, vub+1)) for i in y))
Z = np.array(list(list(0.0005 for _ in range(vlb, vub+1)) for _ in range(len(y))))
for i in range(len(y)):
    for j in range(len(x)):
        Z[i][j] = f[(X[i][j], Y[i][j])]
print(f)
fig = plt.figure()
ax = plt.axes(projection = '3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='viridis', edgecolor='none')
ax.set_title("Hamiltoniain Cycle - Heuristic Approach")
ax.invert_xaxis()
ax.set_xlabel("Number of Vertices")
ax.set_ylabel("Graph Density")
ax.set_zlabel("Time Taken")
plt.show()
